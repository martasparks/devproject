// schema.prisma: 
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  ADMIN
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("emailVerified")
  image         String?

  role          Role     @default(CUSTOMER)

  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int     @map("userId")
  type              String
  provider          String
  providerAccountId String  @map("providerAccountId")
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  id_token          String?
  scope             String?
  session_state     String?
  token_type        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("userId")
  expires      DateTime
  sessionToken String   @map("sessionToken")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_token")
}

model Translation {
  id        Int      @id @default(autoincrement())
  locale    String   
  namespace String   
  key       String   
  value     String   

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([locale, namespace, key])
}

// next.config.ts:
import { NextConfig } from 'next';
import createNextIntlPlugin from 'next-intl/plugin';
 
const nextConfig: NextConfig = {};
 
const withNextIntl = createNextIntlPlugin();
export default withNextIntl(nextConfig);

// package.json:
"dependencies": {
    "@auth/neon-adapter": "^1.10.0",
    "@neondatabase/serverless": "^1.0.1",
    "@prisma/client": "^6.14.0",
    "@prisma/extension-accelerate": "^2.0.2",
    "next": "15.5.0",
    "next-auth": "^5.0.0-beta.29",
    "next-intl": "^4.3.5",
    "nodemailer": "^6.10.1",
    "react": "19.1.0",
    "react-dom": "19.1.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.5.0",
    "prisma": "^6.14.0",
    "tailwindcss": "^4",
    "tsx": "^4.20.4",
    "typescript": "^5"
  }
}

// src/types/next-auth.d.ts:
import NextAuth from "next-auth";

declare module "next-auth" {
  interface User {
    id: number;
    name?: string | null;
    email?: string | null;
    image?: string | null;
    role: "CUSTOMER" | "ADMIN";
  }

  interface Session {
    user: User;
  }
}

// src/lib/auth.ts:
import NextAuth from "next-auth"
import Facebook from "next-auth/providers/facebook"
import Google from "next-auth/providers/google"
import Nodemailer from "next-auth/providers/nodemailer"

import { Pool } from "@neondatabase/serverless"
import NeonAdapter from "@auth/neon-adapter"


if (
  !process.env.DATABASE_URL ||
  !process.env.AUTH_FACEBOOK_ID ||
  !process.env.AUTH_FACEBOOK_SECRET ||
  !process.env.AUTH_GOOGLE_ID ||
  !process.env.AUTH_GOOGLE_SECRET ||
  !process.env.EMAIL_SERVER ||
  !process.env.EMAIL_FROM
) {
  throw new Error(
    "Missing one or more required environment variables: DATABASE_URL, AUTH_FACEBOOK_ID, AUTH_FACEBOOK_SECRET, AUTH_GOOGLE_ID, AUTH_GOOGLE_SECRET, EMAIL_SERVER, EMAIL_FROM"
  )
}

export const providers = [
  Facebook({
    clientId: process.env.AUTH_FACEBOOK_ID,
    clientSecret: process.env.AUTH_FACEBOOK_SECRET,
  }),
  Google({
    clientId: process.env.AUTH_GOOGLE_ID,
    clientSecret: process.env.AUTH_GOOGLE_SECRET,
  }),
  Nodemailer({
    server: process.env.EMAIL_SERVER,
    from: process.env.EMAIL_FROM,
  }),
]

export const providerMap = providers.map(({ id, name }) => ({ id, name }))

export const { handlers, auth, signIn, signOut } = NextAuth(() => {
  const pool = new Pool({ connectionString: process.env.DATABASE_URL })

  return {
    adapter: NeonAdapter(pool),
    providers,
    pages: {
      signIn: "/signin",
    },
  }
})

// src/lib/prisma.ts:
import { PrismaClient } from '@/prisma'
import { withAccelerate } from '@prisma/extension-accelerate'

const globalForPrisma = global as unknown as { 
    prisma: PrismaClient
}

const prisma = globalForPrisma.prisma || new PrismaClient().$extends(withAccelerate())

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma

export default prisma

// src/i18n/request.ts:
import {getRequestConfig} from 'next-intl/server';
import {hasLocale} from 'next-intl';
import {routing} from './routing';
import prisma from '@lib/prisma';

async function loadMessages(locale: string) {
  const translations = await prisma.translation.findMany({
    where: { locale }
  });

  const messages: Record<string, any> = {};

  for (const t of translations) {
    if (!messages[t.namespace]) {
      messages[t.namespace] = {};
    }
    messages[t.namespace][t.key] = t.value;
  }

  return messages;
}

export default getRequestConfig(async ({requestLocale}) => {
  const requested = await requestLocale;
  const locale = hasLocale(routing.locales, requested)
    ? requested
    : routing.defaultLocale;

  return {
    locale,
    messages: await loadMessages(locale)
  };
});

// src/i18n/routing.ts:
import {defineRouting} from 'next-intl/routing';

export const routing = defineRouting({
  locales: ['lv', 'en', 'ru'],
  defaultLocale: 'lv'
});

// src/app/page.tsx:
import { signIn, signOut, auth } from "@lib/auth"

export default async function Home() {
  const session = await auth()

  return (
    <div>
      <h1>Welcome to the Home Page</h1>
      <p>This is a simple Next.js application with authentication.</p>

      {session?.user ? (
        <div style={{marginTop: "20px", padding: "10px", border: "1px solid green"}}>
          <h2>Logged in as:</h2>
          <img src={session.user.image || ""} alt="profile" width={50} height={50} />
          <p><strong>Name:</strong> {session.user.name}</p>
          <p><strong>Email:</strong> {session.user.email}</p>
          <p><strong>Session expires:</strong> {new Date(session.expires || "").toLocaleString()}</p>
          <form
            action={async () => {
              "use server"
              await signOut()
            }}
          >
            <button type="submit">Logout</button>
          </form>
        </div>
      ) : (
        <form
          action={async () => {
            "use server"
            await signIn("facebook")
          }}
        >
          <button type="submit">Signin with Facebook</button>
        </form>
      )}
    </div>
  );
}

// src/app/layout.tsx:
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

// src/app/api/auth/[...nextauth]/route.ts:
import { handlers } from "@lib/auth"

export const { GET, POST } = handlers

// src/app/admin/layout.tsx:
import Link from "next/link";
import { ReactNode } from "react";
import { redirect } from "next/navigation";
import { auth } from "@/lib/auth";

export default async function AdminLayout({ children }: { children: ReactNode }) {
  const session = await auth();

  if (!session?.user || session.user.role !== "ADMIN") {
    redirect("/");
  }

  return (
    <div className="min-h-screen flex">
      {/* Sidebar */}
      <aside className="w-64 bg-gray-900 text-white p-4 space-y-4">
        <h2 className="text-xl font-bold mb-6">Admin Panelis</h2>
        <nav className="flex flex-col space-y-2">
          <Link href="/admin/translations" className="hover:bg-gray-800 px-3 py-2 rounded">
            Tulkojumi
          </Link>
          <Link href="/admin/products" className="hover:bg-gray-800 px-3 py-2 rounded">
            Produkti
          </Link>
          <Link href="/admin/users" className="hover:bg-gray-800 px-3 py-2 rounded">
            Lietotāji
          </Link>
        </nav>
      </aside>

      {/* Main content */}
      <main className="flex-1 p-8 bg-gray-50">
        {children}
      </main>
    </div>
  );
}

// src/app/admin/page.tsx:
export default function AdminHomePage() {
  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold">Laipni lūdzam admin panelī</h1>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="p-6 bg-white rounded-lg shadow">
          <h2 className="text-xl font-semibold">Tulkojumi</h2>
          <p className="text-gray-600">Pārvaldi tulkojumus visām valodām.</p>
        </div>

        <div className="p-6 bg-white rounded-lg shadow">
          <h2 className="text-xl font-semibold">Produkti</h2>
          <p className="text-gray-600">Pievieno un labot produktus.</p>
        </div>

        <div className="p-6 bg-white rounded-lg shadow">
          <h2 className="text-xl font-semibold">Lietotāji</h2>
          <p className="text-gray-600">Pārvaldi lietotāju kontus un lomas.</p>
        </div>
      </div>
    </div>
  );
}

// src/app/[locale]/layout.tsx:
import {NextIntlClientProvider} from 'next-intl';
import {getMessages} from 'next-intl/server';
import {ReactNode} from 'react';

export default async function LocaleLayout({
  children,
  params
}: {
  children: ReactNode;
  params: Promise<{locale: string}>;
}) {
  const {locale} = await params;
  const messages = await getMessages();

  return (
    <html lang={locale}>
      <body>
        <NextIntlClientProvider messages={messages}>
          {children}
        </NextIntlClientProvider>
      </body>
    </html>
  );
}

// src/app/[locale]/signin/page.tsx:
import { redirect } from "next/navigation"
import { signIn, providerMap, auth } from "@lib/auth"
import { AuthError } from "next-auth"
import { getTranslations } from "next-intl/server"
 
const SIGNIN_ERROR_URL = "/error"
 
export default async function SignInPage({
  searchParams,
}: {
  searchParams: Promise<{ callbackUrl?: string }>
}) {
  const t = await getTranslations("SignIn");
  const { callbackUrl } = await searchParams;
  const session = await auth();
  if (session?.user) {
    return redirect("/");
  }
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="w-full max-w-md space-y-6 p-6 bg-white rounded-lg shadow">
        <div className="space-y-4">
          <form
            action={async (formData) => {
              "use server"
              try {
                await signIn("email", formData)
              } catch (error) {
                if (error instanceof AuthError) {
                  return redirect(`${SIGNIN_ERROR_URL}?error=${error.type}`)
                }
                throw error
              }
            }}
          >
            <label htmlFor="email" className="block text-sm font-medium text-gray-700">
              {t("email")}
              <input
                name="email"
                id="email"
                type="email"
                className="mt-1 mb-3 w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
              />
            </label>
            <input
              type="submit"
              value={t("sendMagicLink")}
              className="w-full rounded-md bg-indigo-600 px-4 py-2 text-white font-medium hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
            />
          </form>
          {providerMap &&
            providerMap.map((provider) => (
              <form
                key={provider.id}
                action={async () => {
                  "use server"
                  try {
                    await signIn(provider.id, {
                      redirectTo: callbackUrl || "",
                    })
                  } catch (error) {
                    if (error instanceof AuthError) {
                      return redirect(`${SIGNIN_ERROR_URL}?error=${error.type}`)
                    }
                    throw error
                  }
                }}
              >
                <button
                  type="submit"
                  className="w-full flex items-center justify-center gap-2 rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50"
                >
                  <span>{t("signInWith", { provider: provider.name })}</span>
                </button>
              </form>
            ))}
        </div>
      </div>
    </div>
  )
}